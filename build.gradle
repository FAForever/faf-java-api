import org.springframework.boot.gradle.plugin.SpringBootPlugin

buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath("gradle.plugin.org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.12.0")
  }
}

plugins {
  id "java"
  id "org.springframework.boot" version "3.1.5"
  id "idea"
  id "com.adarshr.test-logger" version "4.0.0"
}

group = 'faforever'

java {
  sourceCompatibility = JavaVersion.VERSION_21
  targetCompatibility = JavaVersion.VERSION_21
}

bootJar.enabled = true
jar.enabled = false

repositories {
  mavenCentral()
  maven { url "https://jitpack.io" }
}

compileJava.dependsOn(processResources)

configurations {
  compile.exclude module: "assertj-core"
}

idea {
  module {
    testSourceDirs += file('src/inttest/java')
  }
}

processResources {
  filesMatching('**/application.yml') {
    filter {
      it.replace('#faf-api.version#', project.version.toString())
    }
  }
}

sourceSets {
  inttest {
    java.srcDir 'src/inttest/java'
    resources.srcDir 'src/inttest/resources'
    compileClasspath += sourceSets.test.compileClasspath
    runtimeClasspath += sourceSets.test.runtimeClasspath
  }
}

configurations {
  inttestCompile.extendsFrom testCompile
  inttestRuntime.extendsFrom testRuntime
}


task inttest(type: Test) {
  group = LifecycleBasePlugin.VERIFICATION_GROUP
  description = "Runs the integration tests."

  setTestClassesDirs(files(sourceSets.inttest.output))
  classpath = sourceSets.inttest.runtimeClasspath

  testLogging {
    events("failed")
    exceptionFormat = 'full'
  }

  useJUnitPlatform()

  mustRunAfter test
}

processInttestResources {
  duplicatesStrategy = DuplicatesStrategy.INCLUDE
}


// JACOCO & COVERALLS
apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'
jacocoTestReport {
  dependsOn inttest
  executionData.from = files(["$buildDir/jacoco/test.exec", "$buildDir/jacoco/inttest.exec"])
  reports {
    xml.required = true
  }
}

// CODACY

configurations {
  codacy
}

task sendCoverageToCodacy(type: JavaExec, dependsOn: jacocoTestReport) {
  mainClass = "com.codacy.CodacyCoverageReporter"
  classpath = configurations.codacy
  args = ["report", "-l", "Java", "-r", "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"]
}

configurations.all {
  // Cache -SNAPSHOT for 60 seconds only
  resolutionStrategy.cacheChangingModulesFor 60, 'seconds'
}

build.dependsOn inttest

test {
  useJUnitPlatform()
  testLogging {
    events("passed", "skipped", "failed")
  }
}

ext {

}

dependencies {
  // Spring Boot managed dependencies
  implementation(platform(SpringBootPlugin.BOM_COORDINATES))
  implementation("org.projectlombok:lombok")
  annotationProcessor(platform(SpringBootPlugin.BOM_COORDINATES))
  annotationProcessor("org.projectlombok:lombok")
  annotationProcessor("org.springframework.boot:spring-boot-configuration-processor")
  testAnnotationProcessor(platform(SpringBootPlugin.BOM_COORDINATES))
  testAnnotationProcessor("org.projectlombok:lombok")
  testAnnotationProcessor("org.springframework.boot:spring-boot-configuration-processor")

  implementation("org.springframework.boot:spring-boot-starter-oauth2-resource-server")
  implementation("org.springframework.boot:spring-boot-starter-data-jpa")
  implementation("org.springframework.boot:spring-boot-starter-web")
  implementation("org.springframework.boot:spring-boot-starter-amqp")
  implementation("org.springframework.boot:spring-boot-starter-security")
  implementation("org.springframework.boot:spring-boot-starter-thymeleaf")
  implementation("org.springframework.boot:spring-boot-starter-mail")
  implementation("org.springframework.boot:spring-boot-starter-validation")
  implementation("org.springframework.boot:spring-boot-starter-actuator")
  implementation("io.micrometer:micrometer-core")
  implementation("com.github.ben-manes.caffeine:caffeine")

  testImplementation("org.springframework.boot:spring-boot-starter-test")
  testImplementation("org.springframework.restdocs:spring-restdocs-mockmvc")
  testImplementation("org.springframework.security:spring-security-test")
  testImplementation("com.jayway.jsonpath:json-path")
  testImplementation("com.jayway.jsonpath:json-path-assert")

  runtimeOnly("io.micrometer:micrometer-registry-prometheus")
  runtimeOnly("org.mariadb.jdbc:mariadb-java-client")

  // Manually managed dependencies
  def elideVersion = "7.0.0"
  def springdocVersion = "2.2.0"
  implementation("com.yahoo.elide:elide-core:${elideVersion}")
  implementation("com.yahoo.elide:elide-model-config:${elideVersion}")
  implementation("com.yahoo.elide:elide-spring-boot-autoconfigure:${elideVersion}")
  implementation("com.yahoo.elide:elide-swagger:${elideVersion}")
  implementation("com.yahoo.elide:elide-datastore-jpa:${elideVersion}")
  implementation("com.yahoo.elide:elide-datastore-multiplex:${elideVersion}")
  implementation("org.springdoc:springdoc-openapi-starter-webmvc-ui:${springdocVersion}")
  implementation("com.github.FAForever:faf-java-commons:0e5d22ffff6e4dea81bac494d532627fcca8ebc4")
  implementation("org.kohsuke:github-api:1.318")
  implementation("org.eclipse.jgit:org.eclipse.jgit:6.7.0.202309050840-r")
  implementation("org.jetbrains:annotations:24.1.0")
  implementation("com.google.guava:guava:32.1.3-jre")
  implementation("org.luaj:luaj-jse:3.0.1")
  implementation("io.github.micheljung:nocatch:2.0")
  implementation("org.apache.commons:commons-compress:1.24.0")
  implementation("org.json:json:20231013")
  implementation("org.jsoup:jsoup:1.16.2")
  implementation("com.github.jasminb:jsonapi-converter:0.13")
  implementation("commons-codec:commons-codec:1.16.0")

  // Required library for FafTokenService approach (called by nimbus-jwt)
  runtimeOnly("org.bouncycastle:bcpkix-jdk15on:1.70")

  testImplementation("junit-addons:junit-addons:1.4")
  testImplementation("org.testcontainers:junit-jupiter:1.19.1")
  testImplementation("org.testcontainers:mariadb:1.19.3")

  codacy("com.github.codacy:codacy-coverage-reporter:13.13.13")
}
