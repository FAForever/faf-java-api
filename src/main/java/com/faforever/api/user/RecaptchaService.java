package com.faforever.api.user;

import com.faforever.api.config.FafApiProperties;
import com.faforever.api.error.ApiException;
import com.faforever.api.error.ErrorCode;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.extern.slf4j.Slf4j;
import org.jetbrains.annotations.Nullable;
import org.springframework.boot.web.client.RestTemplateBuilder;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;

/**
 * Verify responses of Googles Recaptcha v2 and v3 service
 */
@Service
@Slf4j
public class RecaptchaService {
  public static final String RECAPTCHA_VERIFICATION_URL = "https://www.google.com/recaptcha/api/siteverify?secret={secret}&response={response}";
  private final FafApiProperties fafApiProperties;
  private final RestTemplate restTemplate;

  record VerifyResponse(
    boolean success,
    @JsonProperty("challenge_ts")
    OffsetDateTime challengeTs,
    String hostname,
    @JsonProperty("error-codes") List<String> errorCodes) {
  }

  public RecaptchaService(FafApiProperties fafApiProperties,
                          RestTemplateBuilder restTemplateBuilder) {
    this.fafApiProperties = fafApiProperties;
    this.restTemplate = restTemplateBuilder.build();
  }

  /**
   * @param recaptchaResponse is generated by the recaptcha widget in the browser and embedded into the html form.
   */
  public void validateResponse(@Nullable String recaptchaResponse) {
    if (!fafApiProperties.getRecaptcha().isEnabled()) {
      log.debug("Recaptcha validation is disabled");
      return;
    }

    if (recaptchaResponse == null) {
      log.error("Input recaptchaResponse is null");
      throw ApiException.of(ErrorCode.RECAPTCHA_VALIDATION_FAILED);
    }

    log.debug("Validating response: {}", recaptchaResponse);

    VerifyResponse result = restTemplate.postForObject(
      RECAPTCHA_VERIFICATION_URL,
      null,
      VerifyResponse.class,
      Map.of("secret", fafApiProperties.getRecaptcha().getSecret(), "response", recaptchaResponse)
    );

    if (result == null || !result.success) {
      log.debug("Recaptcha validation failed for reasons: {}", result == null ? "result is null" : result.errorCodes);
      throw ApiException.of(ErrorCode.RECAPTCHA_VALIDATION_FAILED);
    } else {
      log.debug("Recaptcha validation successful");
    }
  }
}
